;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var AutocompleteAbstract, Cache, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if ((_ref = window.$) == null) {
    window.$ = require("jquery-commonjs");
  }

  Cache = require("./cache");

  AutocompleteAbstract = (function() {

    AutocompleteAbstract.prototype.KEY = {
      UP: 38,
      DOWN: 40,
      DEL: 46,
      RETURN: 13,
      ESC: 27,
      PAGEUP: 33,
      PAGEDOWN: 34
    };

    function AutocompleteAbstract(select, options) {
      var inlineOptions,
        _this = this;
      this.select = select;
      this.refreshState = __bind(this.refreshState, this);

      this.options = {
        url: null,
        dataType: 'json',
        max: 1000,
        minChars: 0,
        delay: 0,
        caseSensitive: false,
        highlightTitles: true,
        highlightSelection: true,
        showArrows: true,
        exactMatch: false,
        title: null,
        placeholderText: 'Type to search...',
        reformClass: 'reform-autocomplete',
        uiClass: 'reform-autocomplete-ui',
        fakeClass: 'reform-autocomplete-fake',
        floaterClass: 'reform-autocomplete-floater',
        overlayClass: 'reform-autocomplete-overlay',
        filterClass: 'reform-autocomplete-filter',
        listClass: 'reform-autocomplete-list',
        itemClass: 'reform-autocomplete-item',
        hoverClass: 'reform-autocomplete-hover',
        selectedClass: 'reform-autocomplete-selected',
        arrowDownClass: 'reform-autocomplete-arrow-down',
        arrowUpClass: 'reform-autocomplete-arrow-up',
        emptyClass: 'reform-autocomplete-empty',
        disabledClass: 'disabled'
      };
      this.orig = $(this.select);
      if (this.orig.is(".reformed")) {
        return;
      }
      inlineOptions = this.orig.data();
      $.extend(this.options, options);
      $.extend(this.options, inlineOptions);
      if (!!this.options.extraParams) {
        this.options.customParams = this.options.extraParams;
      }
      if (!!this.options.matchCase) {
        this.options.caseSensitive = this.options.matchCase;
      }
      if (!!this.options.colorTitle) {
        this.options.highlightTitles = this.options.colorTitle;
      }
      if (!!this.options.matchAll) {
        this.options.exactMatch = this.options.matchAll;
      }
      if (!!this.options.placeholder) {
        this.options.placeholderText = this.options.placeholder;
      }
      if (!!this.options.arrow) {
        this.options.showArrows = this.options.arrow;
      }
      this.data = [];
      if (this.options.title != null) {
        this.filterValue = this.options.title;
      } else {
        this.filterValue = '';
      }
      if (this.orig.val().length === 0) {
        this.selectedItem = {
          value: null,
          title: ''
        };
      } else {
        this.selectedItem = {
          value: this.orig.val(),
          title: this.options.title
        };
      }
      if (this.options.url != null) {
        this.cache = new Cache(this.options);
      }
      this.el = null;
      this.floater = null;
      this.list = null;
      this.filter = null;
      this.el = this.createClosed();
      this.orig.hide().attr("class", "reformed");
      this.orig.after(this.el).appendTo(this.el);
      $('body').on("reform.open", function(e) {
        if (e.target !== _this.select) {
          return _this.close();
        }
      });
      this.orig.on("reform.sync change DOMSubtreeModified", function() {
        return setTimeout(_this.refreshState, 0);
      });
      this.orig.on("reform.close", function(e) {
        return _this.close();
      });
      this.orig.on("reform.fill", function(e, data) {
        return _this.handleDataFill(data);
      });
      this.el.on('filterChanged', function() {
        return _this.handleFilterChanged();
      });
      this.el.on('selectedItemChanged', function() {
        return _this.handleSelectionChanged();
      });
      this.refreshState();
    }

    AutocompleteAbstract.prototype.handleSelectionChanged = function() {
      this.orig.val(this.selectedItem.value);
      this.orig.data('title', this.selectedItem.title);
      return this.orig.trigger('change', this.selectedItem);
    };

    AutocompleteAbstract.prototype.handleDataFill = function(data) {
      if (this.options.url) {
        return;
      }
      this.close();
      return this.data = this.parse(data);
    };

    AutocompleteAbstract.prototype.handleFilterChanged = function() {
      var _this = this;
      if (!this.floater) {
        return;
      }
      return this.getData(function(data) {
        var $list;
        $list = _this.createList(data);
        return _this.insertList($list);
      });
    };

    AutocompleteAbstract.prototype.handleDisabledToggle = function() {
      if (this.orig.is(':disabled') && !this.el.hasClass(':disabled')) {
        this.close();
        return this.el.addClass(this.options.disabledClass);
      } else if (!this.orig.is(':disabled') && !this.el.hasClass(':disabled')) {
        return this.el.removeClass(this.options.disabledClass);
      }
    };

    AutocompleteAbstract.prototype.setFilterValue = function(value) {
      var oldValue;
      oldValue = this.filterValue;
      this.filterValue = value;
      return this.el.trigger('filterChanged', {
        oldValue: oldValue,
        newValue: this.filterValue
      });
    };

    AutocompleteAbstract.prototype.setSelectedItem = function(item) {
      this.selectedItem = item;
      return this.el.trigger('selectedItemChanged', item);
    };

    AutocompleteAbstract.prototype.refreshState = function() {
      return this.handleDisabledToggle();
    };

    AutocompleteAbstract.prototype.createClosed = function() {
      var $el;
      $el = $("<div/>");
      $el.attr("class", this.orig.attr("class"));
      $el.removeClass(this.options.reformClass);
      $el.addClass(this.options.uiClass);
      $el.addClass(this.options.fakeClass);
      if (this.orig.is(":disabled")) {
        $el.addClass(this.options.disabledClass);
      }
      if (this.options.showArrows) {
        $el.addClass(this.options.arrowDownClass);
      }
      return $el;
    };

    AutocompleteAbstract.prototype.createFloater = function() {
      var $floater;
      $floater = $("<div/>");
      $floater.addClass(this.options.uiClass);
      $floater.addClass(this.options.floaterClass);
      return $floater.css("min-width", this.el.outerWidth() - 2);
    };

    AutocompleteAbstract.prototype.createFilter = function() {
      var $filter,
        _this = this;
      $filter = $("<input/>");
      $filter.addClass(this.options.filterClass);
      if (this.options.placeholderText != null) {
        $filter.attr('placeholder', this.options.placeholderText);
      }
      $filter.on('blur', function() {
        return _this.handleFilterBlur();
      });
      $filter.on("keyup.autocomplete", function(e) {
        return _this.handleKeyUp(e);
      });
      $filter.on("keydown.autocomplete", function(e) {
        return _this.handleKeyDown(e);
      });
      return $filter;
    };

    AutocompleteAbstract.prototype.handleFilterBlur = function() {};

    AutocompleteAbstract.prototype.createEmptyList = function() {
      var $list;
      $list = $('<div></div>');
      $list.addClass(this.options.listClass);
      return $list;
    };

    AutocompleteAbstract.prototype.createList = function(data) {
      var $item, $list, count, item, _i, _len;
      $list = this.createEmptyList();
      if (!data) {
        return;
      }
      count = 0;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        item = data[_i];
        if (this.options.max > count) {
          $item = this.createItem(item);
          $item.appendTo($list);
        }
        count++;
      }
      return $list;
    };

    AutocompleteAbstract.prototype.createItem = function(item) {
      var $item, highlightedText, position, text,
        _this = this;
      $item = $('<div></div>');
      $item.addClass(this.options.itemClass);
      $item.attr('title', item.title);
      $item.attr('value', item.value);
      $item.data('value', item.value);
      position = item.title.toLowerCase().indexOf(this.filterValue.toLowerCase());
      if (this.options.highlightTitles && this.filterValue.length !== 0 && position !== -1) {
        text = item.title.substring(position, position + this.filterValue.length);
        highlightedText = "<strong>" + text + "</strong>";
        $item.html(item.title.replace(text, highlightedText));
      } else {
        $item.text(item.title);
      }
      if (this.options.highlightSelection && (this.selectedItem.value != null)) {
        if (item.value === this.selectedItem.value) {
          $item.addClass(this.options.selectedClass);
        }
      }
      $item.on('mousedown', function(e) {
        return e.preventDefault();
      });
      $item.on('click', function(e) {
        return _this.handleItemSelect($(e.target));
      });
      $item.on('mouseenter', function(e) {
        return _this.setHover($(e.target));
      });
      return $item;
    };

    AutocompleteAbstract.prototype.handleItemSelect = function($item) {
      if ($item.length === 0) {
        return;
      }
      if (this.options.highlightSelection) {
        this.list.children().removeClass(this.options.selectedClass);
        $item.addClass(this.options.selectedClass);
      }
      this.setSelectedItem({
        value: $item.data('value'),
        title: $item.text()
      });
      return this.close();
    };

    AutocompleteAbstract.prototype.insertList = function($list) {
      if (!this.floater) {
        return;
      }
      this.list.empty();
      this.list.append($list.children());
      if (this.list.children().length === 0) {
        this.handleEmptyList();
      }
      return this.list;
    };

    AutocompleteAbstract.prototype.handleEmptyList = function() {
      return this.close();
    };

    AutocompleteAbstract.prototype.open = function() {
      var $body, $overlay,
        _this = this;
      if ((this.floater != null) || this.el.hasClass(this.options.disabledClass)) {
        return;
      }
      this.orig.trigger("reform.open");
      this.floater = this.createFloater();
      $overlay = $('<div></div>');
      $overlay.addClass(this.options.overlayClass);
      $overlay.one('click', function() {
        return _this.close();
      });
      this.list = this.createEmptyList();
      this.list.appendTo(this.floater);
      this.floater.css(this.getFloaterPosition());
      $body = $('body');
      $body.append($overlay);
      $body.append(this.floater);
      return this.getData(function(data) {
        var $list;
        $list = _this.createList(data);
        return _this.insertList($list);
      });
    };

    AutocompleteAbstract.prototype.close = function() {
      if (!this.floater) {
        return;
      }
      this.floater.siblings('.' + this.options.overlayClass).remove();
      this.floater.remove();
      this.floater = null;
      this.list = null;
      this.filterValue = '';
      return this.orig.trigger("reform.closed");
    };

    AutocompleteAbstract.prototype.cancelChanges = function() {
      this.filterValue = this.selectedItem.title;
      this.filter.val(this.filterValue);
      return this.el.trigger('selectedItemChanged', this.selectedItem);
    };

    AutocompleteAbstract.prototype.handleKeyDown = function(e) {
      if (this.orig.is(':disabled')) {
        return;
      }
      if (e.keyCode === this.KEY.UP) {
        e.preventDefault();
      }
      switch (e.keyCode) {
        case this.KEY.DOWN:
          return this.moveHover('down');
        case this.KEY.UP:
          return this.moveHover('up');
        case this.KEY.ESC:
          if (this.floater != null) {
            return e.preventDefault();
          }
          break;
        case this.KEY.RETURN:
          if (this.floater != null) {
            e.preventDefault();
          }
          return this.handleReturnKeyPress();
      }
    };

    AutocompleteAbstract.prototype.handleKeyUp = function(e) {
      if (this.orig.is(':disabled')) {
        return;
      }
      switch (e.keyCode) {
        case this.KEY.DOWN:
        case this.KEY.UP:
        case this.KEY.RETURN:
          break;
        case this.KEY.ESC:
          this.cancelChanges();
          return this.close();
        default:
          return this.setFilterValue(this.filter.val());
      }
    };

    AutocompleteAbstract.prototype.handleReturnKeyPress = function() {
      var $item;
      if (this.floater != null) {
        $item = this.list.find('.' + this.options.hoverClass);
        this.handleItemSelect($item);
      }
      return $item;
    };

    AutocompleteAbstract.prototype.moveHover = function(direction) {
      var $current, $nextHover;
      if (direction == null) {
        direction = 'down';
      }
      if (!this.floater) {
        return;
      }
      $current = this.list.find('.' + this.options.hoverClass);
      if ($current.length === 0) {
        $nextHover = this.list.find('.' + this.options.itemClass + ':first-child');
      } else if (direction === 'down') {
        $nextHover = $current.next();
      } else if (direction === 'up') {
        $nextHover = $current.prev();
      }
      if ($nextHover.length !== 0) {
        this.setHover($nextHover);
        return this.scrollTo($nextHover);
      }
    };

    AutocompleteAbstract.prototype.scrollTo = function($item) {
      var $container, newScrollTop, scrollTop;
      if (!this.floater) {
        return;
      }
      $container = $item.parent();
      newScrollTop = $item.offset().top - $container.offset().top + $container.scrollTop();
      if (newScrollTop > ($container.outerHeight() - $item.outerHeight())) {
        scrollTop = newScrollTop - $container.outerHeight() + $item.outerHeight();
        return $container.scrollTop(scrollTop);
      } else {
        return $container.scrollTop(0);
      }
    };

    AutocompleteAbstract.prototype.setHover = function($item) {
      var $items;
      if (!this.floater) {
        return;
      }
      $items = this.list.find('.' + this.options.itemClass);
      $items.removeClass(this.options.hoverClass);
      return $item.addClass(this.options.hoverClass);
    };

    AutocompleteAbstract.prototype.getFloaterPosition = function() {
      return this.el.offset();
    };

    AutocompleteAbstract.prototype.parse = function(data) {
      var parsed,
        _this = this;
      parsed = [];
      $.each(data, function(num, item) {
        return parsed.push({
          value: item.value,
          title: _this.options.formatResult && _this.options.formatResult(item) || item.title
        });
      });
      return parsed;
    };

    AutocompleteAbstract.prototype.getData = function(callback) {
      var data;
      if (!callback) {
        return;
      }
      if (this.options.url) {
        return this.loadDataFromUrl(callback);
      } else {
        data = this.filterData();
        return callback(data);
      }
    };

    AutocompleteAbstract.prototype.filterData = function() {
      var filterValue, filteredData, item, title, _i, _len, _ref1;
      filteredData = [];
      _ref1 = this.data;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        if (!this.options.exactMatch && (this.filterValue != null)) {
          title = item.title;
          filterValue = this.filterValue;
          if (!this.options.caseSensitive) {
            title = title.toLowerCase();
            filterValue = filterValue.toLowerCase();
          }
          if (title.indexOf(filterValue) !== -1) {
            filteredData.push(item);
          }
        } else {
          filteredData.push(item);
        }
      }
      return filteredData;
    };

    AutocompleteAbstract.prototype.loadDataFromUrl = function(callback) {
      var currentFilter, customParams, data, fetchDataCallback, key, param, params, _i, _len, _ref1,
        _this = this;
      currentFilter = this.filterValue;
      data = this.cache.load(currentFilter);
      if (data != null) {
        callback(data);
        return;
      }
      params = {
        q: currentFilter,
        matchCase: this.options.caseSensitive,
        limit: this.options.max,
        timeStamp: new Date()
      };
      if (this.options.customParams != null) {
        customParams = [];
        _ref1 = this.options.customParams;
        for (param = _i = 0, _len = _ref1.length; _i < _len; param = ++_i) {
          key = _ref1[param];
          customParams[key] = typeof param === "function" ? param() : param;
        }
        $.extend(params, customParams);
      }
      fetchDataCallback = function() {
        return _this.fetchData(params, function(data) {
          var parsedData;
          parsedData = _this.parse(data);
          _this.cache.add(currentFilter, parsedData);
          if (callback != null) {
            return callback(parsedData);
          }
        });
      };
      clearTimeout(this.fetchTimeout);
      return this.fetchTimeout = setTimeout(fetchDataCallback, this.options.delay);
    };

    AutocompleteAbstract.prototype.fetchData = function(params, successCallback) {
      var _this = this;
      if (this.ajaxInProgress) {
        this.lastXHR.abort();
      }
      this.ajaxInProgress = true;
      this.orig.trigger('ajaxRequestStarted');
      return this.lastXHR = $.ajax({
        dataType: this.options.dataType,
        url: this.options.url,
        data: params,
        success: function(data) {
          _this.ajaxInProgress = false;
          _this.orig.trigger('ajaxRequestFinished');
          return successCallback(data);
        },
        error: function(data) {
          _this.ajaxInProgress = false;
          _this.orig.trigger('ajaxRequestFinished');
          return console.log(data);
        }
      });
    };

    return AutocompleteAbstract;

  })();

  module.exports = AutocompleteAbstract;

}).call(this);

},{"./cache":5,"jquery-commonjs":1}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var AutocompleteAbstract, AutocompleteBox, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_ref = window.$) == null) {
    window.$ = require("jquery-commonjs");
  }

  AutocompleteAbstract = require("./autocompleteAbstract");

  AutocompleteBox = (function(_super) {

    __extends(AutocompleteBox, _super);

    function AutocompleteBox(select, options) {
      this.select = select;
      this.handleDisabledToggle = __bind(this.handleDisabledToggle, this);

      this.options = $.extend({
        showArrows: false,
        reformClass: 'reform-autocompletebox',
        uiClass: 'reform-autocompletebox-ui'
      }, options);
      AutocompleteBox.__super__.constructor.call(this, this.select, this.options);
      if (!this.el) {
        return;
      }
      this.filter = this.createFilter();
      if (this.selectedItem.value != null) {
        this.filter.val(this.selectedItem.title);
      }
      this.el.append(this.filter);
    }

    AutocompleteBox.prototype.handleSelectionChanged = function() {
      this.filter.val(this.selectedItem.title);
      return AutocompleteBox.__super__.handleSelectionChanged.apply(this, arguments);
    };

    AutocompleteBox.prototype.handleDisabledToggle = function() {
      AutocompleteBox.__super__.handleDisabledToggle.apply(this, arguments);
      if (!this.filter) {
        return;
      }
      if (this.orig.is(':disabled') && !this.filter.is(':disabled')) {
        return this.filter.attr('disabled', 'disabled');
      } else {
        return this.filter.removeAttr('disabled');
      }
    };

    AutocompleteBox.prototype.createClosed = function() {
      var $el,
        _this = this;
      $el = AutocompleteBox.__super__.createClosed.apply(this, arguments);
      $el.on('click', function() {
        if (!_this.floater && _this.filter.val().length > _this.options.minChars) {
          _this.open();
          return _this.filter.focus();
        }
      });
      return $el;
    };

    AutocompleteBox.prototype.handleFilterBlur = function() {
      this.setSelectedItemByCurrentFilterValue();
      this.close();
      return AutocompleteBox.__super__.handleFilterBlur.apply(this, arguments);
    };

    AutocompleteBox.prototype.open = function() {
      this.filterValue = this.filter.val();
      AutocompleteBox.__super__.open.apply(this, arguments);
      return this.handleArrowsToggle();
    };

    AutocompleteBox.prototype.close = function() {
      AutocompleteBox.__super__.close.apply(this, arguments);
      return this.handleArrowsToggle();
    };

    AutocompleteBox.prototype.handleReturnKeyPress = function() {
      var $item;
      $item = AutocompleteBox.__super__.handleReturnKeyPress.apply(this, arguments);
      if (!$item || $item.length === 0) {
        this.setSelectedItemByCurrentFilterValue();
        return this.close();
      }
    };

    AutocompleteBox.prototype.handleArrowsToggle = function() {
      if (!this.options.showArrows) {
        return;
      }
      if (this.floater != null) {
        this.el.removeClass(this.options.arrowDownClass);
        return this.el.addClass(this.options.arrowUpClass);
      } else {
        this.el.removeClass(this.options.arrowUpClass);
        return this.el.addClass(this.options.arrowDownClass);
      }
    };

    AutocompleteBox.prototype.handleKeyUp = function(e) {
      if (e.keyCode === this.KEY.RETURN) {
        return;
      }
      if (this.filter.val().length > this.options.minChars) {
        if (this.floater == null) {
          this.open();
        }
      } else if (this.floater != null) {
        this.close();
        return;
      } else {
        if (e.keyCode === this.KEY.ESC) {
          this.cancelChanges();
        }
        return;
      }
      return AutocompleteBox.__super__.handleKeyUp.apply(this, arguments);
    };

    AutocompleteBox.prototype.getFloaterPosition = function() {
      var position;
      position = AutocompleteBox.__super__.getFloaterPosition.apply(this, arguments);
      position.top += this.el.outerHeight();
      return position;
    };

    AutocompleteBox.prototype.setSelectedItemByCurrentFilterValue = function() {
      var title,
        _this = this;
      if (this.selectedItem.title !== this.filter.val()) {
        title = this.filter.val();
        return this.getData(function(data) {
          var item, itemTitle, matchingItem, searchTitle, _i, _len;
          matchingItem = null;
          if (title.length !== 0) {
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              item = data[_i];
              if (_this.options.caseSensitive) {
                itemTitle = item.title;
                searchTitle = title;
              } else {
                itemTitle = item.title.toLowerCase();
                searchTitle = title.toLowerCase();
              }
              if (!matchingItem && itemTitle === searchTitle) {
                matchingItem = item;
              }
            }
          }
          if (matchingItem != null) {
            return _this.setSelectedItem({
              value: matchingItem.value,
              title: matchingItem.title
            });
          } else {
            return _this.setSelectedItem({
              value: null,
              title: title
            });
          }
        });
      }
    };

    return AutocompleteBox;

  })(AutocompleteAbstract);

  module.exports = AutocompleteBox;

}).call(this);

},{"./autocompleteAbstract":2,"jquery-commonjs":1}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var AutocompleteAbstract, AutocompleteCombobox, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_ref = window.$) == null) {
    window.$ = require("jquery-commonjs");
  }

  AutocompleteAbstract = require("./autocompleteAbstract");

  AutocompleteCombobox = (function(_super) {

    __extends(AutocompleteCombobox, _super);

    function AutocompleteCombobox(select, options) {
      var $title;
      this.select = select;
      this.options = $.extend({
        emptySelectionText: 'Select an item...',
        emptyText: 'No results.',
        reformClass: 'reform-autocompletecombobox',
        uiClass: 'reform-autocompletecombobox-ui',
        titleClass: 'reform-autocomplete-selected-label',
        floaterLabelClass: 'reform-autocomplete-floater-label',
        placeholderClass: 'placeholder'
      }, options);
      AutocompleteCombobox.__super__.constructor.call(this, this.select, this.options);
      if (!this.el) {
        return;
      }
      this.filterValue = '';
      $title = this.createTitle();
      if (this.selectedItem.value != null) {
        $title.text(this.selectedItem.title);
        $title.removeClass(this.options.placeholderClass);
      }
      this.el.append($title);
    }

    AutocompleteCombobox.prototype.handleSelectionChanged = function() {
      var $title;
      $title = this.el.find('span');
      if (this.selectedItem.value != null) {
        $title.text(this.selectedItem.title);
        $title.removeClass(this.options.placeholderClass);
      }
      return AutocompleteCombobox.__super__.handleSelectionChanged.apply(this, arguments);
    };

    AutocompleteCombobox.prototype.createClosed = function() {
      var $el,
        _this = this;
      $el = AutocompleteCombobox.__super__.createClosed.apply(this, arguments);
      $el.on('click', function() {
        return _this.open();
      });
      return $el;
    };

    AutocompleteCombobox.prototype.createTitle = function() {
      var $title;
      $title = $('<span></span>');
      $title.addClass(this.options.titleClass);
      if ($title.text(this.options.emptySelectionText != null)) {
        $title.addClass(this.options.placeholderClass);
        $title.text(this.options.emptySelectionText);
      }
      return $title;
    };

    AutocompleteCombobox.prototype.createFloaterLabel = function() {
      var $title,
        _this = this;
      $title = $('<span></span>');
      $title.addClass(this.options.floaterLabelClass);
      if (this.options.showArrows) {
        $title.addClass(this.options.arrowUpClass);
      }
      if (this.selectedItem.value) {
        $title.text(this.selectedItem.title);
      } else {
        $title.text(this.options.emptySelectionText);
      }
      $title.one('click', function() {
        return _this.close();
      });
      return $title;
    };

    AutocompleteCombobox.prototype.createNoResults = function() {
      var $empty;
      $empty = $('<div></div>');
      $empty.addClass(this.options.emptyClass);
      return $empty.text(this.options.emptyText);
    };

    AutocompleteCombobox.prototype.handleEmptyList = function() {
      return this.list.append(this.createNoResults());
    };

    AutocompleteCombobox.prototype.open = function() {
      var $title;
      AutocompleteCombobox.__super__.open.apply(this, arguments);
      $title = this.createFloaterLabel();
      $title.insertBefore(this.list);
      this.filter = this.createFilter();
      this.filter.insertBefore(this.list);
      return this.filter.focus();
    };

    return AutocompleteCombobox;

  })(AutocompleteAbstract);

  module.exports = AutocompleteCombobox;

}).call(this);

},{"./autocompleteAbstract":2,"jquery-commonjs":1}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var Cache, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if ((_ref = window.$) == null) {
    window.$ = require("jquery-commonjs");
  }

  Cache = (function() {

    Cache.prototype.data = {};

    Cache.prototype.length = 0;

    Cache.prototype.options = {
      cacheLength: 100,
      matchContains: false,
      matchSubset: true
    };

    function Cache(options) {
      this.load = __bind(this.load, this);
      $.extend(this.options, options);
    }

    Cache.prototype.matchSubset = function(s, sub) {
      var i;
      if (!this.options.matchCase) {
        s = s.toLowerCase();
      }
      i = s.indexOf(sub);
      if (this.options.matchContains === "word") {
        i = s.toLowerCase().search("\\b" + sub.toLowerCase());
      }
      if (i === -1) {
        return false;
      }
      return i === 0 || this.options.matchContains;
    };

    Cache.prototype.add = function(q, value) {
      if (this.length > this.options.cacheLength) {
        flush();
      }
      if (!this.data[q]) {
        this.length++;
      }
      return this.data[q] = value;
    };

    Cache.prototype.flush = function() {
      this.data = {};
      return this.length = 0;
    };

    Cache.prototype.load = function(q) {
      var c, csub, i, self;
      if (!this.options.cacheLength || !this.length) {
        return null;
      }
      if (this.data[q]) {
        return this.data[q];
      } else if (this.options.matchSubset) {
        i = q.length - 1;
        while (i >= this.options.minChars) {
          c = this.data[q.substr(0, i)];
          if (c) {
            csub = [];
            self = this;
            $.each(c, function(i, x) {
              if (self.matchSubset(x.title, q)) {
                return csub[csub.length] = x;
              }
            });
            return csub;
          }
          i--;
        }
      }
      return null;
    };

    return Cache;

  })();

  module.exports = Cache;

}).call(this);

},{"jquery-commonjs":1}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var CheckBox, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if ((_ref = window.$) == null) {
    window.$ = require("jquery-commonjs");
  }

  CheckBox = (function() {

    function CheckBox(input) {
      this.refresh = __bind(this.refresh, this);

      var _this = this;
      this.orig = $(input);
      if (this.orig.is(".reformed")) {
        return;
      }
      if (this.orig.is(":radio")) {
        this.siblings = $("[name='" + (this.orig.attr("name")) + "']").not(this.orig);
      }
      this.fake = $("<label/>");
      this.fake.attr("class", this.orig.attr("class"));
      this.orig.hide().attr("class", "reformed");
      this.fake.removeClass("reform-checkbox").addClass("reform-checkbox-fake");
      if (this.orig.is(":checked")) {
        this.fake.addClass("checked");
      }
      if (this.orig.is(":disabled")) {
        this.fake.addClass("disabled");
      }
      if (this.orig.is(":radio")) {
        this.fake.addClass("radio");
      }
      this.orig.after(this.fake).appendTo(this.fake);
      this.fake.on("mousedown", function(e) {
        return e.preventDefault();
      });
      this.orig.on("reform.sync change DOMSubtreeModified", function() {
        return setTimeout(_this.refresh, 0);
      });
    }

    CheckBox.prototype.refresh = function() {
      var _ref1;
      this.fake.toggleClass("disabled", this.orig.is(":disabled"));
      this.fake.removeClass("checked");
      if (this.orig.is(":checked")) {
        this.fake.addClass("checked");
      }
      return (_ref1 = this.siblings) != null ? _ref1.each(function() {
        return $(this).parent().removeClass("checked");
      }) : void 0;
    };

    return CheckBox;

  })();

  module.exports = CheckBox;

}).call(this);

},{"jquery-commonjs":1}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var Reform, reform;

  Reform = require("./reform");

  reform = new Reform;

  reform.observe();

  window.Reform = reform;

}).call(this);

},{"./reform":8}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var AutocompleteBox, AutocompleteCombobox, CheckBox, Reform, SelectBox, _ref;

  if ((_ref = window.$) == null) {
    window.$ = require("jquery-commonjs");
  }

  CheckBox = require("./checkbox");

  SelectBox = require("./selectbox");

  AutocompleteBox = require("./autocompletebox");

  AutocompleteCombobox = require("./autocompletecombobox");

  Reform = (function() {

    function Reform() {}

    Reform.prototype.process = function(node) {
      var cls, control, n, _ref1, _results;
      _ref1 = Reform.controls;
      _results = [];
      for (cls in _ref1) {
        control = _ref1[cls];
        _results.push((function() {
          var _i, _len, _ref2, _results1;
          _ref2 = $(node).parent().find("." + cls);
          _results1 = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            n = _ref2[_i];
            _results1.push(new control(n));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Reform.prototype.observe = function() {
      var _this = this;
      $(document).on("ready", function() {
        return _this.process("body");
      });
      return $(document).on("DOMNodeInserted", function(e) {
        return _this.process(e.target);
      });
    };

    Reform.prototype.register = function(controlName, controlObj) {
      return Reform.controls[controlName] = controlObj;
    };

    return Reform;

  })();

  Reform.controls = {
    "reform-checkbox": CheckBox,
    "reform-selectbox": SelectBox,
    "reform-autocompletebox": AutocompleteBox,
    "reform-autocompletecombobox": AutocompleteCombobox
  };

  module.exports = Reform;

}).call(this);

},{"./autocompletebox":3,"./autocompletecombobox":4,"./checkbox":6,"./selectbox":9,"jquery-commonjs":1}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.4.0
(function() {
  var SelectBox, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if ((_ref = window.$) == null) {
    window.$ = require("jquery-commonjs");
  }

  SelectBox = (function() {

    function SelectBox(select) {
      var _this = this;
      this.select = select;
      this.refresh = __bind(this.refresh, this);

      this.close = __bind(this.close, this);

      this.open = __bind(this.open, this);

      this.options = __bind(this.options, this);

      this.orig = $(this.select);
      if (this.orig.is(".reformed")) {
        return;
      }
      this.body = $("body");
      this.fake = $("<div/>");
      this.fake.attr("tabindex", 0);
      this.fake.attr("class", this.orig.attr("class"));
      this.orig.hide().attr("class", "reformed");
      this.fake.removeClass("reform-selectbox").addClass("reform-selectbox-fake");
      if (this.orig.is(":disabled")) {
        this.fake.addClass("disabled");
      }
      this.refresh();
      this.orig.after(this.fake).appendTo(this.fake);
      this.fake.on("keyup", function(ev) {
        if (ev.keyCode === 27) {
          ev.preventDefault();
          return ev.stopPropagation();
        }
      });
      this.fake.on("keydown", function(ev) {
        var $current, $item, $nextItem, done, goDown, goUp, itemDoesNotExist, itemIsDisabled;
        ev.preventDefault();
        ev.stopPropagation();
        if (_this.orig.is("[multiple]")) {
          return;
        }
        _this.fake.focus();
        goUp = ev.keyCode === 38;
        goDown = ev.keyCode === 40;
        if (goUp || goDown) {
          if (!(_this.floater != null)) {
            return _this.open();
          } else {
            $current = $('.hover', _this.floater).length === 0 ? $('.selected', _this.floater) : $('.hover', _this.floater);
            if (goUp) {
              $nextItem = $current.prev().length === 0 ? $current.parent().children().last() : $current.prev();
            } else {
              $nextItem = $current.next().length === 0 ? $current.parent().children().first() : $current.next();
            }
            _this.hover($nextItem);
            return _this.scrollTo($nextItem);
          }
        } else if (ev.keyCode === 13) {
          $item = $(_this.floater).find('.hover');
          itemDoesNotExist = $item.length === 0;
          itemIsDisabled = $item.is(".disabled");
          if (itemDoesNotExist || itemIsDisabled) {
            return;
          }
          $item.siblings().andSelf().removeClass("selected");
          $item.addClass("selected");
          _this.orig.val(_this.value()).trigger("change");
          return _this.close();
        } else if (ev.keyCode === 27) {
          if (_this.floater != null) {
            return _this.close();
          }
        } else {
          done = false;
          return _this.$list.children().each(function(i, item) {
            if (!done) {
              if ($(item).text().charAt(0).toLowerCase() === String.fromCharCode(ev.keyCode).toLowerCase()) {
                done = true;
                _this.hover($(item));
                return _this.scrollTo($(item));
              }
            }
          });
        }
      });
      this.floater = null;
      this.fake.on("click", function(e) {
        if (_this.orig.is(":disabled")) {
          return;
        }
        e.stopPropagation();
        if (_this.floater === null) {
          return _this.open();
        } else {
          return _this.close();
        }
      });
      this.fake.on("mousedown", function(e) {
        return e.preventDefault();
      });
      this.orig.on("reform.sync change DOMSubtreeModified", this.refresh);
      this.body.on("reform.open", function(e) {
        if (e.target !== _this.select) {
          return _this.close();
        }
      });
      $('.reform-selectbox-options').remove();
    }

    SelectBox.prototype.hover = function($item) {
      $item.siblings().andSelf().removeClass("hover");
      return $item.addClass("hover");
    };

    SelectBox.prototype.scrollTo = function($item) {
      var $container, newScrollTop, scrollTop,
        _this = this;
      $container = $item.parent();
      newScrollTop = $item.offset().top - $container.offset().top + $container.scrollTop();
      this.ignoreMouse = true;
      if (newScrollTop > ($container.outerHeight() - $item.outerHeight())) {
        scrollTop = newScrollTop - $container.outerHeight() + $item.outerHeight();
        $container.scrollTop(scrollTop);
      } else {
        $container.scrollTop(0);
      }
      if (this.to) {
        clearTimeout(this.to);
      }
      return this.to = setTimeout(function() {
        return _this.ignoreMouse = false;
      }, 500);
    };

    SelectBox.prototype.options = function() {
      var _this = this;
      if (this.floater == null) {
        return;
      }
      this.fake.focus();
      this.floater.empty();
      this.$list = $("<div/>").appendTo(this.floater);
      this.$list.attr("class", "reform-selectbox-list");
      return this.orig.find("option").each(function(i, option) {
        var $item, $option;
        $option = $(option);
        $item = $("<div/>");
        $item.attr("class", "reform-selectbox-item");
        if ($option.is(":selected")) {
          $item.addClass("selected");
        }
        if ($option.is(":disabled")) {
          $item.addClass("disabled");
        }
        $item.attr("title", $option.attr("title"));
        $item.attr("value", $option.val());
        $item.text($option.text());
        $item.appendTo(_this.$list);
        $item.on("mousedown", function(e) {
          return e.preventDefault();
        });
        $item.hover(function() {
          if (!_this.ignoreMouse) {
            return _this.hover($item);
          }
        });
        return $item.on("click", function(e) {
          if ($item.is('.disabled')) {
            return;
          }
          if (_this.orig.is("[multiple]")) {
            $item.toggleClass("selected");
            e.stopPropagation();
          } else {
            $item.siblings().andSelf().removeClass("selected");
            $item.addClass("selected");
          }
          return _this.orig.val(_this.value()).trigger("change");
        });
      });
    };

    SelectBox.prototype.value = function() {
      return this.$list.find(".reform-selectbox-item.selected").map(function() {
        return $(this).val();
      });
    };

    SelectBox.prototype.open = function() {
      var $window, pos;
      this.orig.trigger("reform.open");
      this.floater = $("<div/>");
      this.floater.attr("class", "reform-selectbox-options");
      this.floater.css("min-width", this.fake.outerWidth());
      this.floater.addClass(this.orig.data("options-class"));
      this.body.append(this.floater);
      this.options();
      this.body.one("click", this.close);
      pos = this.fake.offset();
      this.floater.show();
      $window = $(window);
      if (pos.top + this.floater.outerHeight() > $window.height()) {
        pos.top = pos.top - this.floater.outerHeight() + this.fake.outerHeight();
      }
      if (pos.left + this.floater.outerWidth() > $window.width()) {
        pos.left = pos.left - this.floater.outerWidth() + this.fake.outerWidth();
      }
      return this.floater.css(pos);
    };

    SelectBox.prototype.close = function() {
      var _ref1;
      if ((_ref1 = this.floater) != null) {
        _ref1.remove();
      }
      return this.floater = null;
    };

    SelectBox.prototype.refresh = function() {
      var plural, selected, title;
      this.fake.toggleClass("disabled", this.orig.is(":disabled"));
      title = this.orig.data('title');
      if (!title) {
        selected = this.orig.find("option").filter(function() {
          return this.selected && $(this).data("count-option") !== "no";
        });
        plural = this.orig.data("plural");
        title = (plural != null) && selected.length > 1 ? "" + selected.length + " " + plural : selected.map(function() {
          return $(this).text();
        }).get().join(", ");
        if (!title) {
          title = this.orig.attr("title");
        }
        if (title == null) {
          title = "Select";
        }
      }
      this.fake.contents().filter(function() {
        return this.nodeType === Node.TEXT_NODE;
      }).remove();
      this.fake.append(document.createTextNode(title));
      return this.options();
    };

    return SelectBox;

  })();

  module.exports = SelectBox;

}).call(this);

},{"jquery-commonjs":1}]},{},[7])
;