// Generated by CoffeeScript 1.4.0
(function() {
  var AutocompleteBox, GeoAutocompleteBox, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_ref = window.$) == null) {
    window.$ = require("jquery-commonjs");
  }

  AutocompleteBox = require("./autocompletebox.coffee");

  GeoAutocompleteBox = (function(_super) {

    __extends(GeoAutocompleteBox, _super);

    function GeoAutocompleteBox() {
      this.parse = __bind(this.parse, this);

      this.request = __bind(this.request, this);
      return GeoAutocompleteBox.__super__.constructor.apply(this, arguments);
    }

    GeoAutocompleteBox.prototype.request = function(term, success, failure) {
      var data, geocoder, options, parsed,
        _this = this;
      if (!this.options.matchCase) {
        term = term.toLowerCase();
      }
      data = this.cache.load(term);
      if (data) {
        parsed = this.options.parse && this.options.parse(options.noRecord) || this.parse(options.noRecord);
        return success(term, parsed);
      } else if (this.options.url != null) {
        geocoder = new google.maps.Geocoder();
        options = {
          'address': term
        };
        return geocoder.geocode(options, function(results, status) {
          var _base;
          if (status === google.maps.GeocoderStatus.OK) {
            parsed = (typeof (_base = _this.options).parse === "function" ? _base.parse(data, term) : void 0) || _this.parse(data, term);
            _this.options.data = parsed;
            return success(parsed, term);
          } else {
            return failure(status, results);
          }
        });
      } else {
        return failure('Set options.url', term);
      }
    };

    GeoAutocompleteBox.prototype.parse = function(data, term) {
      return console.log(data);
    };

    return GeoAutocompleteBox;

  })(AutocompleteBox);

}).call(this);
