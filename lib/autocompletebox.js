// Generated by CoffeeScript 1.4.0
(function() {
  var AutocompleteBox, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if ((_ref = window.$) == null) {
    window.$ = require("jquery-commonjs");
  }

  AutocompleteBox = (function() {

    function AutocompleteBox(select, options) {
      var _this = this;
      this.select = select;
      this.options = options;
      this.refresh = __bind(this.refresh, this);

      this.close = __bind(this.close, this);

      this.open = __bind(this.open, this);

      this.selectCurrent = __bind(this.selectCurrent, this);

      this.setHover = __bind(this.setHover, this);

      this.fillOptions = __bind(this.fillOptions, this);

      this.orig = $(this.select);
      this.options = {
        data: [
          {
            title: "one",
            value: "1"
          }, {
            title: "two",
            value: "2"
          }, {
            title: "three",
            value: "3"
          }, {
            title: "four",
            value: "4"
          }
        ],
        selected: 0,
        minType: 2,
        formatter: null,
        callback: null,
        cache: null
      };
      this.KEY = {
        UP: 38,
        DOWN: 40,
        DEL: 46,
        RETURN: 13,
        ESC: 27,
        PAGEUP: 33,
        PAGEDOWN: 34
      };
      if (this.orig.is(".reformed")) {
        return;
      }
      this.body = $("body");
      this.fake = $("<div/>");
      this.fake.attr("class", this.orig.attr("class"));
      this.orig.hide().attr("class", "reformed");
      this.fake.removeClass("reform-autocompletebox").addClass("reform-autocompletebox-fake");
      if (this.orig.is(":disabled")) {
        this.fake.addClass("disabled");
      }
      this.input = $("<input/>");
      this.input.addClass("reform-autocompletebox-input");
      this.fake.append(this.input);
      this.refresh();
      this.orig.after(this.fake).appendTo(this.fake);
      this.floater = null;
      this.input.on("keydown", function(e) {
        if (_this.orig.is(":disabled")) {
          return;
        }
        e.stopPropagation();
        return setTimeout(function() {
          if (_this.options.minType >= _this.input.val().length) {
            _this.close();
            return;
          }
          _this.currentSelection = _this.input.val();
          switch (e.keyCode) {
            case _this.KEY.DOWN:
              return _this.setHover(_this.options.selected + 1);
            case _this.KEY.UP:
              return _this.setHover(_this.options.selected - 1);
            case _this.KEY.RETURN:
              return _this.selectCurrent();
            case _this.KEY.ESC:
              return _this.close();
            default:
              _this.options.selected = 0;
              if (_this.floater === null) {
                _this.open();
                return _this.refresh();
              } else {
                return _this.refresh();
              }
          }
        }, 0);
      });
      this.input.on("blur", function(e) {
        return _this.close();
      });
      this.body.on("reform.open", function(e) {
        if (e.target !== _this.select) {
          return _this.close();
        }
      });
    }

    AutocompleteBox.prototype.fillOptions = function() {
      var $list, isAny,
        _this = this;
      if (this.floater == null) {
        return;
      }
      this.floater.empty();
      $list = $("<div/>").appendTo(this.floater);
      $list.attr("class", "reform-autocompletebox-list");
      isAny = false;
      $.each(this.options.data, function(i, item) {
        var $item;
        if (item.title.indexOf(_this.currentSelection) !== -1) {
          isAny = true;
          $item = $("<div/>");
          $item.attr("class", "reform-autocompletebox-item");
          $item.attr("title", item.title);
          $item.attr("value", item.value);
          $item.text(item.title);
          $item.appendTo($list);
          $item.on("mousedown", function(e) {
            return e.preventDefault();
          });
          $item.on("click", function(e) {
            if ($item.is('.disabled')) {
              return;
            }
            return _this.selectCurrent();
          });
          return $item.on("mouseenter", function(e) {
            var elem;
            if ($item.is('.disabled')) {
              return;
            }
            elem = e.target;
            return _this.setHover($(elem).index() + 1);
          });
        }
      });
      if (!isAny) {
        return this.close();
      }
    };

    AutocompleteBox.prototype.setHover = function(newSelected) {
      var $list;
      if (!(this.floater != null)) {
        return;
      }
      $list = this.floater.find('.reform-autocompletebox-list');
      if (newSelected < 1) {
        return;
      }
      if (newSelected > $list.children().length) {
        return;
      }
      this.options.selected = newSelected;
      $list.children().removeClass("reform-autocompletebox-hover");
      return $list.find(':nth-child(' + this.options.selected + ')').addClass("reform-autocompletebox-hover");
    };

    AutocompleteBox.prototype.selectCurrent = function() {
      var $selected, title, value;
      if (!(this.floater != null) || this.options.selected === 0) {
        return;
      }
      $selected = this.floater.find('.reform-autocompletebox-list').find(':nth-child(' + this.options.selected + ')');
      $selected.addClass('selected');
      value = $selected.attr("value");
      title = $selected.attr("title");
      this.orig.val(value);
      this.input.val(title);
      this.orig.trigger("change");
      return this.close();
    };

    AutocompleteBox.prototype.open = function() {
      var $window, pos;
      this.orig.trigger("reform.open");
      this.floater = $("<div/>");
      this.floater.attr("class", "reform-autocompletebox-options");
      this.floater.css("min-width", this.fake.outerWidth() - 10 - 2);
      this.floater.addClass(this.orig.data("options-class"));
      this.body.append(this.floater);
      this.body.one("click", this.close);
      pos = this.fake.offset();
      this.floater.show();
      $window = $(window);
      if (pos.top + this.floater.outerHeight() > $window.height()) {
        pos.top = pos.top - this.floater.outerHeight() + this.fake.outerHeight();
      }
      if (pos.left + this.floater.outerWidth() > $window.width()) {
        pos.left = pos.left - this.floater.outerWidth() + this.fake.outerWidth();
      }
      pos.top += this.fake.outerHeight();
      return this.floater.css(pos);
    };

    AutocompleteBox.prototype.close = function() {
      var _ref1;
      if ((_ref1 = this.floater) != null) {
        _ref1.remove();
      }
      return this.floater = null;
    };

    AutocompleteBox.prototype.refresh = function() {
      this.fake.toggleClass("disabled", this.orig.is(":disabled"));
      return this.fillOptions();
    };

    return AutocompleteBox;

  })();

  module.exports = AutocompleteBox;

}).call(this);
