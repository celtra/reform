// Generated by CoffeeScript 1.4.0
(function() {
  var AutocompleteAbstract, AutocompleteBox, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_ref = window.$) == null) {
    window.$ = require("jquery-commonjs");
  }

  AutocompleteAbstract = require("./autocompleteAbstract");

  AutocompleteBox = (function(_super) {

    __extends(AutocompleteBox, _super);

    function AutocompleteBox(select, options) {
      this.select = select;
      this.handleDisabledToggle = __bind(this.handleDisabledToggle, this);

      this.options = $.extend({
        showArrows: false,
        reformClass: 'reform-autocompletebox',
        uiClass: 'reform-autocompletebox-ui'
      }, options);
      AutocompleteBox.__super__.constructor.call(this, this.select, this.options);
      if (!this.el) {
        return;
      }
      this.filter = this.createFilter();
      if (this.selectedItem.value != null) {
        this.filter.val(this.selectedItem.title);
      }
      this.el.append(this.filter);
    }

    AutocompleteBox.prototype.handleSelectionChanged = function() {
      this.filter.val(this.selectedItem.title);
      return AutocompleteBox.__super__.handleSelectionChanged.apply(this, arguments);
    };

    AutocompleteBox.prototype.handleDisabledToggle = function() {
      AutocompleteBox.__super__.handleDisabledToggle.apply(this, arguments);
      if (!this.filter) {
        return;
      }
      if (this.orig.is(':disabled') && !this.filter.is(':disabled')) {
        return this.filter.attr('disabled', 'disabled');
      } else {
        return this.filter.removeAttr('disabled');
      }
    };

    AutocompleteBox.prototype.createClosed = function() {
      var $el,
        _this = this;
      $el = AutocompleteBox.__super__.createClosed.apply(this, arguments);
      $el.on('click', function() {
        if (!_this.floater && _this.filter.val().length > _this.options.minChars) {
          _this.open();
          return _this.filter.focus();
        }
      });
      return $el;
    };

    AutocompleteBox.prototype.handleFilterBlur = function() {
      this.setSelectedItemByCurrentFilterValue();
      this.close();
      return AutocompleteBox.__super__.handleFilterBlur.apply(this, arguments);
    };

    AutocompleteBox.prototype.open = function() {
      this.filterValue = this.filter.val();
      AutocompleteBox.__super__.open.apply(this, arguments);
      return this.handleArrowsToggle();
    };

    AutocompleteBox.prototype.close = function() {
      AutocompleteBox.__super__.close.apply(this, arguments);
      return this.handleArrowsToggle();
    };

    AutocompleteBox.prototype.handleReturnKeyPress = function() {
      var $item;
      $item = AutocompleteBox.__super__.handleReturnKeyPress.apply(this, arguments);
      if (!$item || $item.length === 0) {
        this.setSelectedItemByCurrentFilterValue();
        return this.close();
      }
    };

    AutocompleteBox.prototype.handleArrowsToggle = function() {
      if (!this.options.showArrows) {
        return;
      }
      if (this.floater != null) {
        this.el.removeClass(this.options.arrowDownClass);
        return this.el.addClass(this.options.arrowUpClass);
      } else {
        this.el.removeClass(this.options.arrowUpClass);
        return this.el.addClass(this.options.arrowDownClass);
      }
    };

    AutocompleteBox.prototype.handleKeyUp = function(e) {
      if (e.keyCode === this.KEY.RETURN) {
        return;
      }
      if (this.filter.val().length > this.options.minChars) {
        if (this.floater == null) {
          this.open();
        }
      } else if (this.floater != null) {
        this.close();
        return;
      } else {
        if (e.keyCode === this.KEY.ESC) {
          this.cancelChanges();
        }
        return;
      }
      return AutocompleteBox.__super__.handleKeyUp.apply(this, arguments);
    };

    AutocompleteBox.prototype.getFloaterPosition = function() {
      var position;
      position = AutocompleteBox.__super__.getFloaterPosition.apply(this, arguments);
      position.top += this.el.outerHeight();
      return position;
    };

    AutocompleteBox.prototype.setSelectedItemByCurrentFilterValue = function() {
      var title,
        _this = this;
      if (this.selectedItem.title !== this.filter.val()) {
        title = this.filter.val();
        return this.getData(function(data) {
          var item, itemTitle, matchingItem, searchTitle, _i, _len;
          matchingItem = null;
          if (title.length !== 0) {
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              item = data[_i];
              if (_this.options.caseSensitive) {
                itemTitle = item.title;
                searchTitle = title;
              } else {
                itemTitle = item.title.toLowerCase();
                searchTitle = title.toLowerCase();
              }
              if (!matchingItem && itemTitle === searchTitle) {
                matchingItem = item;
              }
            }
          }
          if (matchingItem != null) {
            return _this.setSelectedItem({
              value: matchingItem.value,
              title: matchingItem.title
            });
          } else {
            return _this.setSelectedItem({
              value: null,
              title: title
            });
          }
        });
      }
    };

    return AutocompleteBox;

  })(AutocompleteAbstract);

  module.exports = AutocompleteBox;

}).call(this);
