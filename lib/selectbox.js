// Generated by CoffeeScript 1.4.0
(function() {
  var SelectBox, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if ((_ref = window.$) == null) {
    window.$ = require("jquery-commonjs");
  }

  SelectBox = (function() {

    function SelectBox(select) {
      var _this = this;
      this.select = select;
      this.refresh = __bind(this.refresh, this);

      this.close = __bind(this.close, this);

      this.open = __bind(this.open, this);

      this.options = __bind(this.options, this);

      this.orig = $(this.select);
      if (this.orig.is(".reformed")) {
        return;
      }
      this.body = $("body");
      this.fake = $("<div/>");
      this.fake.attr("class", this.orig.attr("class"));
      this.orig.hide().attr("class", "reformed");
      this.fake.removeClass("reform-selectbox").addClass("reform-selectbox-fake");
      if (this.orig.is(":disabled")) {
        this.fake.addClass("disabled");
      }
      this.refresh();
      this.orig.after(this.fake).appendTo(this.fake);
      this.floater = null;
      this.fake.on("click", function(e) {
        if (_this.orig.is(":disabled")) {
          return;
        }
        e.stopPropagation();
        if (_this.floater === null) {
          return _this.open();
        } else {
          return _this.close();
        }
      });
      this.fake.on("mousedown", function(e) {
        return e.preventDefault();
      });
      this.orig.on("reform.sync change DOMSubtreeModified", this.refresh);
      this.body.on("reform.open", function(e) {
        if (e.target !== _this.select) {
          return _this.close();
        }
      });
      $('.reform-selectbox-options').remove();
    }

    SelectBox.prototype.options = function() {
      var $list,
        _this = this;
      if (this.floater == null) {
        return;
      }
      this.floater.empty();
      $list = $("<div/>").appendTo(this.floater);
      $list.attr("class", "reform-selectbox-list");
      return this.orig.find("option").each(function(i, option) {
        var $item, $option;
        $option = $(option);
        $item = $("<div/>");
        $item.attr("class", "reform-selectbox-item");
        if ($option.is(":selected")) {
          $item.addClass("selected");
        }
        if ($option.is(":disabled")) {
          $item.addClass("disabled");
        }
        $item.attr("title", $option.attr("title"));
        $item.attr("value", $option.val());
        $item.text($option.text());
        $item.appendTo($list);
        $item.on("mousedown", function(e) {
          return e.preventDefault();
        });
        return $item.on("click", function(e) {
          var values;
          if ($item.is('.disabled')) {
            return;
          }
          if (_this.orig.is("[multiple]")) {
            $item.toggleClass("selected");
            e.stopPropagation();
          } else {
            $item.siblings().andSelf().removeClass("selected");
            $item.addClass("selected");
          }
          values = $item.parent().find(".reform-selectbox-item.selected").map(function() {
            return $(this).val();
          });
          return _this.orig.val(values).trigger("change");
        });
      });
    };

    SelectBox.prototype.open = function() {
      var $window, pos;
      this.orig.trigger("reform.open");
      this.floater = $("<div/>");
      this.floater.attr("class", "reform-selectbox-options");
      this.floater.css("min-width", this.fake.outerWidth());
      this.floater.addClass(this.orig.data("options-class"));
      this.body.append(this.floater);
      this.options();
      this.body.one("click", this.close);
      pos = this.fake.offset();
      this.floater.show();
      $window = $(window);
      if (pos.top + this.floater.outerHeight() > $window.height()) {
        pos.top = pos.top - this.floater.outerHeight() + this.fake.outerHeight();
      }
      if (pos.left + this.floater.outerWidth() > $window.width()) {
        pos.left = pos.left - this.floater.outerWidth() + this.fake.outerWidth();
      }
      return this.floater.css(pos);
    };

    SelectBox.prototype.close = function() {
      var _ref1;
      if ((_ref1 = this.floater) != null) {
        _ref1.remove();
      }
      return this.floater = null;
    };

    SelectBox.prototype.refresh = function() {
      var plural, selected, title;
      this.fake.toggleClass("disabled", this.orig.is(":disabled"));
      title = this.orig.data('title');
      if (!title) {
        selected = this.orig.find("option").filter(function() {
          return this.selected && $(this).data("count-option") !== "no";
        });
        plural = this.orig.data("plural");
        title = (plural != null) && selected.length > 1 ? "" + selected.length + " " + plural : selected.map(function() {
          return $(this).text();
        }).get().join(", ");
        if (!title) {
          title = this.orig.attr("title");
        }
        if (title == null) {
          title = "Select";
        }
      }
      this.fake.contents().filter(function() {
        return this.nodeType === Node.TEXT_NODE;
      }).remove();
      this.fake.append(document.createTextNode(title));
      return this.options();
    };

    return SelectBox;

  })();

  module.exports = SelectBox;

}).call(this);
