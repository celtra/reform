// Generated by CoffeeScript 1.4.0
(function() {
  var AutocompleteBox, GeoAutocompleteBox, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_ref = window.$) == null) {
    window.$ = require("jquery-commonjs");
  }

  AutocompleteBox = require("./autocompletebox");

  GeoAutocompleteBox = (function(_super) {

    __extends(GeoAutocompleteBox, _super);

    function GeoAutocompleteBox(selector, options) {
      this.parse = __bind(this.parse, this);

      this.request = __bind(this.request, this);

      var extOptions;
      this.overrides = {
        matchAll: true,
        matchContains: false,
        matchSubset: false,
        url: '/custom',
        autocompleteClass: 'reform-geoautocompletebox',
        itemClass: 'reform-geoautocompletebox-item',
        hoverClass: 'reform-geoautocompletebox-hover',
        listClass: 'reform-geoautocompletebox-list',
        optionsClass: 'reform-geoautocompletebox-options',
        fakeClass: 'reform-geoautocompletebox-fake',
        inputClass: 'reform-geoautocompletebox-input'
      };
      extOptions = {};
      $.extend(extOptions, this.overrides);
      GeoAutocompleteBox.__super__.constructor.call(this, selector, extOptions);
    }

    GeoAutocompleteBox.prototype.request = function(term, success, failure) {
      var data, geocoder, options,
        _this = this;
      data = this.cache.load(term);
      if (data) {
        return success();
      } else if (this.options.url != null) {
        geocoder = new google.maps.Geocoder();
        options = {
          'address': term
        };
        return geocoder.geocode(options, function(results, status) {
          var parsed, _base;
          if (status === google.maps.GeocoderStatus.OK) {
            parsed = (typeof (_base = _this.options).parse === "function" ? _base.parse(results, term) : void 0) || _this.parse(results, term);
            _this.options.data = parsed;
            return success();
          } else {
            return failure();
          }
        });
      } else {
        return failure('Set options.url', term);
      }
    };

    GeoAutocompleteBox.prototype.parse = function(data, term) {
      var parsed,
        _this = this;
      parsed = [];
      $.each(data, function(num, item) {
        return parsed.push({
          value: item.geometry.location.lat() + "|" + item.geometry.location.lng(),
          title: item.formatted_address
        });
      });
      return parsed;
    };

    return GeoAutocompleteBox;

  })(AutocompleteBox);

  module.exports = GeoAutocompleteBox;

}).call(this);
